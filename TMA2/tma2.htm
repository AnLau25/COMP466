<!DOCTYPE html>

<html>

<head>
    <meta charset="utf-8" />
    <title>README</title>
    <script type="text/javascript" async
        src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/3.2.0/es5/tex-mml-chtml.js">
        </script>
    <link rel="stylesheet" type="text/css" href="./shared/styles.css" />
</head>

<body>
    <!-- Header -->
    <section id="header">
        <div class="header container">
            <div class="nav-bar">
                <div class="brand">
                    <a href="#hero">
                        <h1><span>The</span> homework <span>page</span></h1>
                    </a>
                </div>
                <div class="nav-list">
                    <ul>
                        <li><a href="#q1" data-after="unit1">Question 1</a></li>
                        <li><a href="#q2" data-after="Unit1">Question 2</a></li>
                    </ul>
                </div>
            </div>
        </div>
    </section>
    <!-- End Header -->

    <!-- Hero Section  -->
    <section id="hero">
        <div class="hero container">
            <div class="text-block">
                <h1>COMP466 <span>Advanced Technologies for Web-Based Systems</span> <strong
                        style="font-size: 15px;">Assignment 1</strong> </h1>
                <p><strong>Name: </strong>Ana Laura Valdés Rodríguez</p>
                <p><strong>Student number: </strong>3728648</p>
                <p><strong>Start date: </strong>2025-02-26</p>
                <p><strong>Submit date: </strong>2025-03-13</p>
                <p><strong>Time estimate: </strong>46h</p>
            </div>
        </div>
    </section>
    <!-- End Hero Section  -->

    <!-- q1 Section -->
    <section id="q1">
        <div class="section-container">
            <div class="top">
                <h1 class="section-title"><span>Question 1: </span>Website bookmarker</h1>
                <p class="section-subtitle">Page that allows authenticated users to store web links</p>
            </div>

            <div class="bottom">
                <div class="exmpl-item">
                    <div class="exmpl-info">
                        <h1>Explanation</h1>
                        <p>As requested, the page serves a tool for the user to store and browse their website bookmarks, 
                            once they have signed in. Additionally, the top 10 most visited bookmarks amongst all the users 
                            can be viewed at the top, including bookmarks that do not belong the user themselves.
                            <div class="section-ul">
                                <p><strong>Database:</strong></p>
                                <ul>
                                    <li>This part’s database is named <em>bookmarks</em> and contains two tables to help store user authentication information and their links.</li>
                                    <li><strong>The <em>users</em> table is formed of two columns:</strong>
                                        <ul>
                                            <li><strong>user_name:</strong> This is the primary key, ensuring each username is unique. It's used in the SignIn script and must be filled to create a new user.</li>
                                            <li><strong>user_pswrd:</strong> Allows the user to verify their identity. Both columns are NOT NULL.</li>
                                        </ul>
                                    </li>
                                    <li><strong>The <em>links</em> table comprises five columns:</strong>
                                        <ul>
                                            <li><strong>link_id:</strong> A numeric INT value, automatically incremented and set by the database. This is the primary key, enabling unique identification of each link.</li>
                                            <li><strong>link_adr:</strong> The URL address of the website to bookmark.</li>
                                            <li><strong>link_name:</strong> A user-defined name for easier browsing.</li>
                                            <li><strong>link_click:</strong> Counts how many times a link has been clicked, useful for analyzing popularity.</li>
                                            <li><strong>user_name:</strong> A foreign key to the user table, ensuring every link is associated with a user.</li>
                                        </ul>
                                    </li>
                                </ul>
                            </div>
                            <div class="section-ul">
                                <p><strong>Page functionality and documentation:</strong></p>
                                <ul>
                                    <li><strong>SignIn & LogIn/Out:</strong>
                                        <ul>
                                            <li>For the login, a mix of Ajax (to send in new links and navigate without reloading) and PHP (to fetch credentials) was used.</li>
                                            <li>User credentials are hashed with a simple hash to protect identity (<a class="abi" href="https://www.php.net/manual/en/function.password-hash.php" target="_blank">PHP: password_hash - Manual</a>).</li>
                                            <li>Sessions remain open while the user is on the website and close as a safety measure when they leave.</li>
                                            <li>Passwords are hashed on sign-in using <code>password_hash($plaintextPassword, PASSWORD_BCRYPT)</code> and verified during login using <code>password_verify($password, $row['user_pswrd'])</code>.</li>
                                        </ul>
                                    </li>
                                    <li><strong>Adding a Bookmark:</strong>
                                        <ul>
                                            <li>A simple SQL query passed through PHP allows the creation of bookmarks.</li>
                                            <li>A bookmark consists of a numeric primary key, a name, a username (foreign key), and a click counter.</li>
                                            <li>Link ID and click counter are automatically generated, and the username is fetched from the current session.</li>
                                            <li>Click counters track visits and help calculate the most-visited links via SQL queries.</li>
                                        </ul>
                                    </li>
                                    <li><strong>Browsing Bookmarks:</strong>
                                        <ul>
                                            <li>Users search by bookmark name, as it’s more memorable than the link path.</li>
                                            <li>SQL queries filter links by the user's credentials. If no search is performed, all links are displayed using AJAX for seamless interaction (<a class="abi" href="https://www.w3schools.com/php/php_ajax_php.asp" target="_blank">PHP - AJAX and PHP</a>).</li>
                                        </ul>
                                    </li>
                                    <li><strong>Editing/Deleting:</strong>
                                        <ul>
                                            <li>Users can edit or delete bookmarks via respective buttons next to each bookmark.</li>
                                            <li>Delete actions prompt a confirmation window before removal from the database.</li>
                                            <li>Editing is enabled through a modal, where users can change the bookmark's link or name.</li>
                                            <li>SQL queries use <code>link_id</code> as a unique identifier for all actions (<a class="abi" href="https://www.w3schools.com/mysql/mysql_primarykey.asp" target="_blank">MySQL PRIMARY KEY Constraint</a>).</li>
                                        </ul>
                                    </li>
                                </ul>
                            </div>    
                            <div class="section-ul">
                                <p><strong>Additional notes:</strong></p>
                                <ul>
                                    <li>The page is divided into two sections: one for storing bookmarks and another for browsing them.</li>
                                    <li>The homepage greets users and displays the top 10 most-clicked links across all entities.</li>
                                    <li>A navigation bar facilitates section switching and allows logging out.</li>
                                    <li>Website access requires signing in first.</li>
                                    <li>Create the users from the sign-in pages so the passwords are stored as hashed. Otherwise, hash manually via <code>hach.php</code></li>
                                    <li>Please, ensure proper database acces in in <code>connection.php</code></li>
                                </ul>
                            </div>                        
                        <a href="./part1/index.php" type="button" class="cta">See Solution</a>
                    </div>
                    <div class="exmpl-cont">
                        <img src="./shared/q1.jpg" alt="img">
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- End q1 Section -->

    <!-- q2 Section -->
    <section id="q2">
        <div class="section-container">
            <div class="top">
                <h1 class="section-title"><span>Question 2: </span>Learning website</h1>
                <p class="section-subtitle">The website provides three lessons on advanced web technologies and quizzes, implementing an education oriented EML.</p>
            </div>

            <div class="bottom">
                <div class="exmpl-item">
                    <div class="exmpl-info">
                        <h1>Explanation</h1>
                        <p>The website presents a set of three lessons that the user can access upon signing in. Each lesson comes with its specific quiz, for which the user can view answers and 
                            relevant information upon completion. Lastly, both the lessons and the quizzes are parsed from MySQL-stored EMLs, allowing all course-related information to be stored on the server.</p>
                            <div class="section-ul">
                                <p><strong>Database:</strong></p>
                                <ul>
                                    <li><em>Lessons</em> is the database for the homework’s second part. It is composed of three tables, serving to authenticate, store content, and keep track of made progress.</li>
                                    <li>The <em>user</em> table is identical to that of part 1, so you may refer to the database section of the documentation, under users.</li>
                                    <li>
                                        <strong>The <em>xml_storage</em> table is composed of 3 columns and serves to store the quiz and lesson EMLs:</strong>
                                        <ul>
                                            <li><strong>id:</strong> Assigns every xml file an autogenerated unique id that serves as the primary key and will be used all through part 2 to identify the lesson and quiz EMLs.</li>
                                            <li><strong>filename:</strong> The name of the uploaded file. While precision is not a necessity here, it’s important to use meaningful names in real-world scenarios.</li>
                                            <li><strong>xml_content:</strong> Contains the EMLs themselves, stored as LONGTEXT in the database to be called later on by the application.</li>
                                        </ul>
                                    </li>
                                    <li>
                                        <strong>The <em>progress_record</em> table is made up of 4 different columns, used for backend logic support:</strong>
                                        <ul>
                                            <li><strong>record_id:</strong> The entity’s primary key, automatically generated when a new instance is created.</li>
                                            <li><strong>record_status:</strong> Tracks the user’s progress status for each lesson. When a user reads a lesson, a new table instance is created with a default status of “reading.” This changes to “completed” when the unit is finished (tested).</li>
                                            <li><strong>user_name:</strong> Serves as a foreign key to the user whose progress we are recording. All instances of <em>progress_record</em> must have an assigned user.</li>
                                            <li><strong>lesson:</strong> A foreign key to the unit for which progress is recorded. All progress instances must be linked to a lesson.</li>
                                        </ul>
                                    </li>
                                </ul>
                            </div>
                            <div class="section-ul">
                                <p><strong>Educational Markup Language (EML):</strong></p>
                                <ul>
                                    <li><strong>Lessons:</strong>
                                        <ul>
                                            <li><code>&lt;eml_U1&gt;:</code> Root element containing the entire document.</li>
                                            <li><code>&lt;head&gt;:</code> Holds the lesson's header.
                                                <ul>
                                                    <li><code>&lt;title&gt;:</code> Main title of the document.</li>
                                                    <li><code>&lt;subtitle&gt;:</code> Describes the document’s content.</li>
                                                </ul>
                                            </li>
                                            <li><code>&lt;lesson&gt;:</code> Represents different lessons:
                                                <ul>
                                                    <li><code>&lt;title&gt;:</code> Lesson title.</li>
                                                    <li><code>&lt;paragraph&gt;:</code> Textual content explaining concepts.</li>
                                                    <li><code>&lt;list&gt;:</code> Contains lists of items.</li>
                                                    <li><code>&lt;list-paragraph&gt;:</code> Introductory text for a list.</li>
                                                    <li><code>&lt;item&gt;:</code> Individual list items.</li>
                                                    <li><code>&lt;example-block&gt;:</code> Holds example sections.</li>
                                                </ul>
                                            </li>
                                            <li><code>&lt;example&gt;:</code> Represents an individual example:
                                                <ul>
                                                    <li><code>&lt;title&gt;:</code> Title of the example.</li>
                                                    <li><code>&lt;paragraph&gt;:</code> Explanation of the example.</li>
                                                    <li><code>&lt;list&gt;:</code> Contains structured information (like lesson lists).</li>
                                                    <li><code>&lt;img&gt;:</code> References an image related to the example.</li>
                                                </ul>
                                            </li>
                                        </ul>
                                    </li>
                                    <li><strong>Quizzes:</strong>
                                        <ul>
                                            <li><code>&lt;question&gt;:</code> Represents an individual quiz question.</li>
                                            <li><code>&lt;text&gt;:</code> Contains the question's text.</li>
                                            <li><code>&lt;choices&gt;:</code> Groups the possible answer choices for a question:
                                                <ul>
                                                    <li><code>&lt;wrong&gt;:</code> Represents an incorrect answer choice.</li>
                                                    <li><code>&lt;correct&gt;:</code> Represents the correct answer choice.</li>
                                                </ul>
                                            </li>
                                        </ul>
                                    </li>
                                </ul>
                            </div>
                            <div class="section-ul">
                                <p><strong>Functionality Overview:</strong></p>
                                <ul>
                                    <li><strong>Authentication:</strong>
                                        <ul>
                                            <li>The same authentication system as part 1 is utilized. The user table in the database remains private to the lessons database.</li>
                                            <li>Refer to the <strong>SignIn & LogIn/Out</strong> section of part 1 for details.</li>
                                        </ul>
                                    </li>
                                    <li><strong>Parsers:</strong>
                                        <ul>
                                            <li>PHP EML parser is divided into two files for lessons and quizzes, ensuring cleaner code (<a class="abi" href="https://www.php.net/manual/en/function.xml-parse.php" target="_blank">PHP: xml_parse - Manual</a>).</li>
                                            <li>Specific EML is required as input, incorrect types result in parsing errors.</li>
                                            <li><strong>Lessons parser:</strong>
                                                <ul>
                                                    <li>Iterates through EML elements using <code>foreach</code> to handle repeated elements (<a class="abi" href="https://www.php.net/manual/en/simplexml.examples-basic.php" target="_blank">PHP: Basic SimpleXML usage - Manual</a>).</li>
                                                    <li>Examples and lessons vary slightly in formatting (e.g., inclusion of images) but share core structures.</li>
                                                    <li>List and paragraph elements are consistently displayed under both tags.</li>
                                                </ul>
                                            </li>
                                            <li><strong>Quiz parser:</strong>
                                                <ul>
                                                    <li>All questions are displayed within <code>fieldset</code>, with class attributes for correct/wrong answers to allow corrections.</li>
                                                    <li>Loops through <code>questions</code>, <code>text</code>, and <code>choices</code> straightforwardly.</li>
                                                </ul>
                                            </li>
                                        </ul>
                                    </li>
                                    <li><strong>Lesson grading:</strong>
                                        <ul>
                                            <li>A JS script (<code>grading.js</code>) counts questions and tracks answers, marking correct ones with class “green” and wrong ones with “red”.</li>
                                            <li>It calculates success percentage and displays correct choices over total questions.</li>
                                        </ul>
                                    </li>
                                    <li><strong>Tracking logic:</strong>
                                        <ul>
                                            <li>The <code>progress_record</code> table tracks user progress on lessons.</li>
                                            <li>Displays user progress on the homepage (reading or tested material). If no progress is found, it suggests starting from Unit 1.</li>
                                            <li><code>unit.php</code>: Checks for progress entries and adds them if reviewing a unit for the first time.</li>
                                            <li><code>done.php</code>: Updates the lesson as “tested” upon quiz grading, displaying it as completed on the homepage.</li>
                                        </ul>
                                    </li>
                                </ul>
                            </div>
                            <div class="section-ul">
                                <p><strong>Additional notes:</strong></p>
                                <ul>
                                    <li>Same hashing rules from part 1 apply.</li>
                                    <li>The homepage addresses the user and shows them their progress.</li>
                                    <li>A navigation bar facilitates going from one lesson to the next and back to the home page, also allowing logging out.</li>
                                    <li>Website access requires signing in first.</li>
                                    <li>The EMLs can be uploaded to the database via <code>xmlUpload.php</code>, one at a time, specifying the proper file URL and name.</li>
                                    <li>Please ensure the EML’s IDs are numbered 1-6, from 1 to 3 as units and 4 to 6 as quizzes. (Otherwise, you’d have to change the URLs in the nav-bar)</li>
                                    <li>Please ensure proper database access in <code>connect.php</code></li>
                                </ul>
                            </div>
                        <a href="./part2/index.php" type="button" class="cta">See Solution</a>
                    </div>
                    <div class="exmpl-cont">
                        <img src="./shared/q2.jpg" alt="img">
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- End q2 Section -->


</body>
<script>
    fetch('./shared/sessKill.php');
</script>

</html>